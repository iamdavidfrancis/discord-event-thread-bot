name: Publish Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
    paths:
      - "src/**"
      - "Dockerfile"
      - "package*.json"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REPOSITORY: iamdavidfrancis
  IMAGE_NAME: discord-event-thread-bot

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build-and-push.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
          flavor:
            latest=${{ github.event_name != 'pull_request' }}
      - name: Build and push docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: Production
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy App Revision
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy:  "ghcr.io/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:main@${{ needs.build.outputs.image-digest }}"
          containerAppName: ${{ vars.CONTAINER_APP_NAME }}
          resourceGroup: ${{ vars.CONTAINER_RESOURCE_GROUP }}
    